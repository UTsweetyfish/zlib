Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 zlib (1:1.2.11.4-1+eagle) unstable; urgency=low
 .
   * ['Autobuild release-candidate: b481bdc72ac33414c18e6819cec31e35caf72da6']
Author: shuttle <shuttle@deepin.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2020-05-16

--- zlib-1.2.11.4.orig/deflate.c
+++ zlib-1.2.11.4/deflate.c
@@ -254,13 +254,58 @@ local void slide_hash(s)
 
     n = s->hash_size;
     p = &s->head[n];
+#ifdef ENABLE_MMI
+    __asm__ volatile(
+         "dmtc1     %2,    $f2           \n\t"
+         "punpcklhw $f2,   $f2,  $f2     \n\t"
+         "punpcklwd $f2,   $f2,  $f2     \n\t"
+         "xor       $f6,   $f6,  $f6     \n\t"
+         "1:                             \n\t"
+         "gsldlc1   $f0,   -0x01(%0)     \n\t"
+         "gsldrc1   $f0,   -0x08(%0)     \n\t"
+         "psubush   $f4,   $f0,  $f2     \n\t"
+         "pcmpgtw   $f8,   $f4,  $f6     \n\t"
+         "and       $f4,   $f4,  $f8     \n\t"
+         "gssdlc1   $f4,   -0x01(%0)     \n\t"
+         "gssdrc1   $f4,   -0x08(%0)     \n\t"
+         "daddiu    %0,    %0,   -0x08   \n\t"
+         "daddiu    %1,    %1,   -0x01   \n\t"
+         "bnez      %1,    1b            \n\t"
+	 : "+&r"(p)
+         : "r"(n / 4), "r"(wsize)
+	 : "memory", "$f0", "$f2", "$f4", "$f6"
+    );
+#else
     do {
         m = *--p;
         *p = (Pos)(m >= wsize ? m - wsize : NIL);
     } while (--n);
+#endif
     n = wsize;
 #ifndef FASTEST
     p = &s->prev[n];
+#ifdef ENABLE_MMI
+    __asm__ volatile(
+         "dmtc1     %2,    $f2           \n\t"
+         "punpcklhw $f2,   $f2,  $f2     \n\t"
+         "punpcklwd $f2,   $f2,  $f2     \n\t"
+         "xor       $f6,   $f6,  $f6     \n\t"
+         "1:                             \n\t"
+         "gsldlc1   $f0,   -0x01(%0)     \n\t"
+         "gsldrc1   $f0,   -0x08(%0)     \n\t"
+         "psubush   $f4,   $f0,  $f2     \n\t"
+         "pcmpgtw   $f8,   $f4,  $f6     \n\t"
+         "and       $f4,   $f4,  $f8     \n\t"
+         "gssdlc1   $f4,   -0x01(%0)     \n\t"
+         "gssdrc1   $f4,   -0x08(%0)     \n\t"
+         "daddiu    %0,    %0,   -0x08   \n\t"
+         "daddiu    %1,    %1,   -0x01   \n\t"
+         "bnez      %1,    1b            \n\t"
+         : "+&r"(p)
+         : "r"(n / 4), "r"(wsize)
+         : "memory", "$f0", "$f2", "$f4", "$f6"
+    );
+#else
     do {
         m = *--p;
         *p = (Pos)(m >= wsize ? m - wsize : NIL);
@@ -269,6 +314,7 @@ local void slide_hash(s)
          */
     } while (--n);
 #endif
+#endif
 }
 #endif
 
@@ -1359,12 +1405,43 @@ local uInt longest_match(s, cur_match)
          */
         Assert(scan[2] == match[2], "scan[2]?");
         scan++, match++;
+#ifdef ENABLE_MMI
+	do {
+            __asm__ volatile (
+                ".set noreorder      \r\n"
+                "1:                  \r\n"
+                "daddu   $10, %0, 8  \r\n"
+                "bgeu    $10, %2, 2f \r\n"
+                "nop                 \r\n"
+                "ldr     $8,  1(%0)  \r\n"
+                "ldl     $8,  8(%0)  \r\n"
+                "ldr     $9,  1(%1)  \r\n"
+                "ldl     $9,  8(%1)  \r\n"
+                "bne     $8,  $9, 2f \r\n"
+                "nop                 \r\n"
+                "daddu   %0,  %0, 8  \r\n"
+                "daddu   %1,  %1, 8  \r\n"
+                "b       1b          \r\n"
+                "nop                 \r\n"
+                "2:                  \r\n"
+                ".set reorder        \r\n"
+                : "+&r"(scan), "+&r"(match)
+                : "r"(strend)
+                : "memory", "$8", "$9", "$10"
+            );
+        } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
+                 *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
+                 *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
+                 *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
+                 scan < strend);
+#else
         do {
         } while (*(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
                  *(ushf*)(scan+=2) == *(ushf*)(match+=2) &&
                  scan < strend);
+#endif
         /* The funny "do {}" generates better code on most compilers */
 
         /* Here, scan <= window+strstart+257 */
@@ -1393,13 +1470,43 @@ local uInt longest_match(s, cur_match)
         /* We check for insufficient lookahead only every 8th comparison;
          * the 256th check will be made at strstart+258.
          */
+#ifdef ENABLE_MMI
+	do {
+            __asm__ volatile (
+                ".set noreorder      \r\n"
+                "1:                  \r\n"
+                "daddu   $10, %0, 8  \r\n"
+                "bgeu    $10, %2, 2f \r\n"
+                "nop                 \r\n"
+                "ldr     $8,  1(%0)  \r\n"
+                "ldl     $8,  8(%0)  \r\n"
+                "ldr     $9,  1(%1)  \r\n"
+                "ldl     $9,  8(%1)  \r\n"
+                "bne     $8,  $9, 2f \r\n"
+                "nop                 \r\n"
+                "daddu   %0,  %0, 8  \r\n"
+                "daddu   %1,  %1, 8  \r\n"
+                "b       1b          \r\n"
+                "nop                 \r\n"
+                "2:                  \r\n"
+                ".set reorder        \r\n"
+                : "+&r"(scan), "+&r"(match)
+                : "r"(strend)
+                : "memory", "$8", "$9", "$10"
+            );
+        } while (*++scan == *++match && *++scan == *++match &&
+                 *++scan == *++match && *++scan == *++match &&
+                 *++scan == *++match && *++scan == *++match &&
+                 *++scan == *++match && *++scan == *++match &&
+                 scan < strend);
+#else
         do {
         } while (*++scan == *++match && *++scan == *++match &&
                  *++scan == *++match && *++scan == *++match &&
                  *++scan == *++match && *++scan == *++match &&
                  *++scan == *++match && *++scan == *++match &&
                  scan < strend);
-
+#endif
         Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");
 
         len = MAX_MATCH - (int)(strend - scan);
--- zlib-1.2.11.4.orig/inffast.c
+++ zlib-1.2.11.4/inffast.c
@@ -306,7 +306,69 @@ unsigned start;         /* inflate()'s s
                     out = chunkcopy_lapped_relaxed(out, dist, len);
 #else
                     from = out - dist;          /* copy direct from output */
-                    do {                        /* minimum length is three */
+#ifdef ENABLE_MMI
+                    while (len > 7 && dist >= 8) {
+                        __asm__ volatile (
+                        ".set noreorder         \r\n"
+                        "uld     $8,  0(%4)     \r\n"
+                        "daddiu  %2,  %5,   -8  \r\n"
+                        "daddiu  %1,  %4,    8  \r\n"
+                        "usd     $8,  0(%3)     \r\n"
+                        "daddiu  %0,  %3,    8  \r\n"
+                        ".set reorder           \r\n"
+                        : "=r"(out), "=r"(from), "=r"(len)
+                        : "r"(out), "r"(from), "r"(len)
+                        : "$8"
+                        );
+                    }
+                    if (dist == 1) {
+                        unsigned char f_tmp = *(from);
+                        from += len;
+                        unsigned long long f_8;
+                        __asm__ volatile (
+                        ".set noreorder            \r\n"
+                        "move   $9, $0             \r\n"
+                        "move   $8, $0             \r\n"
+                        "dins   $8, %1, 0x8,  0x8  \r\n"
+                        "or     $8, $8, %1         \r\n"
+                        "dins   $9, $8, 0x10, 0x10 \r\n"
+                        "or     $9, $8, $9         \r\n"
+                        "dsll   $8, $9, 0x20       \r\n"
+                        "or     %0, $9, $8         \r\n"
+                        ".set reorder              \r\n"
+                        : "=r"(f_8)
+                        : "r"(f_tmp)
+                        : "$8", "$9"
+                        );
+                        while (len > 7) {
+                            __asm__ volatile (
+                            ".set noreorder       \r\n"
+                            "usd      %2, (%0)    \r\n"
+                            "daddiu   %0, %0, 8   \r\n"
+                            "daddiu   %1, %1,-8   \r\n"
+                            ".set reorder         \r\n"
+                            : "=r"(out), "=r"(len)
+                            : "r"(f_8)
+                            );
+                        }
+                        while (len--) {
+                            *out++ = f_tmp;
+                        }
+                    } else {
+                        while (len > 2) {           /* minimum length is three */
+                            *out++ = *from++;
+                            *out++ = *from++;
+                            *out++ = *from++;
+                            len -= 3;
+                        }
+                        if (len) {
+                            *out++ = *from++;
+                            if (len > 1)
+                                *out++ = *from++;
+                        }
+                    }
+#else
+                    do {                         /* minimum length is three */
                         *out++ = *from++;
                         *out++ = *from++;
                         *out++ = *from++;
@@ -318,6 +380,7 @@ unsigned start;         /* inflate()'s s
                             *out++ = *from++;
                     }                   
 #endif
+#endif
                 }
             }
             else if ((op & 64) == 0) {          /* 2nd level distance code */
