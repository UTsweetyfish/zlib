Description: <short summary of the patch>
 TODO: Put a short summary on the line above and replace this paragraph
 with a longer explanation of this change. Complete the meta-information
 with other relevant fields (see below for details). To make it easier, the
 information below has been extracted from the changelog. Adjust it or drop
 it.
 .
 zlib (1:1.2.11.dfsg-2) unstable; urgency=low
 .
   * add  0001-Merge-loongson-mmi-optimizations.patch
Author: jin bo <jinbo-hf@loongson.cn>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: https://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: 2021-02-07

--- zlib-1.2.11.dfsg.orig/deflate.c
+++ zlib-1.2.11.dfsg/deflate.c
@@ -160,16 +160,7 @@ local const config configuration_table[1
  *    characters, so that a running hash key can be computed from the previous
  *    key instead of complete recalculation each time.
  */
-#if defined(HASH_ARMV8_CRC32)
-#include <arm_acle.h>
-#define UPDATE_HASH_CRC_INTERNAL(s, h, c) \
-	(h = __crc32w(0, (c) & 0xFFFFFF) & ((deflate_state *)s)->hash_mask)
-
-#define UPDATE_HASH(s, h, c) \
-    UPDATE_HASH_CRC_INTERNAL(s, h, *(unsigned *)((uintptr_t)(&c) - (MIN_MATCH-1)))
-#else
 #define UPDATE_HASH(s,h,c) (h = (((h)<<s->hash_shift) ^ (c)) & s->hash_mask)
-#endif
 
 /* ===========================================================================
  * Insert string str in the dictionary and set match_head to the previous head
@@ -1268,14 +1259,14 @@ local unsigned read_buf(strm, buf, size)
     strm->avail_in  -= len;
 
     zmemcpy(buf, strm->next_in, len);
-#ifdef GZIP
-    if (strm->state->wrap == 2) {
-        strm->adler = crc32(strm->adler, buf, len);
-    } else 
-#endif
     if (strm->state->wrap == 1) {
         strm->adler = adler32(strm->adler, buf, len);
     }
+#ifdef GZIP
+    else if (strm->state->wrap == 2) {
+        strm->adler = crc32(strm->adler, buf, len);
+    } 
+#endif
 
     strm->next_in  += len;
     strm->total_in += len;
--- zlib-1.2.11.dfsg.orig/inffast.c
+++ zlib-1.2.11.dfsg/inffast.c
@@ -92,12 +92,7 @@ unsigned start;         /* inflate()'s s
 #endif
     wsize = state->wsize;
     whave = state->whave;
-#if defined(INFLATE_CHUNK_SIMD_NEON)    
-    limit = out + strm->avail_out;
-    wnext = (state->wnext == 0 && whave >= wsize) ? wsize : state->wnext;
-#else
     wnext = state->wnext;
-#endif
     window = state->window;
     hold = state->hold;
     bits = state->bits;
@@ -205,44 +200,6 @@ unsigned start;         /* inflate()'s s
 #endif
                     }
                     from = window;
-#if defined(INFLATE_CHUNK_SIMD_NEON)
-                    if (wnext >= op) {          /* contiguous in window */
-                        from += wnext - op;
-                    }
-                    else {                      /* wrap around window */
-                        op -= wnext;
-                        from += wsize - op;
-                        if (op < len) {         /* some from end of window */
-                            len -= op;
-                            out = chunkcopy_safe(out, from, op, limit);
-                            from = window;      /* more from start of window */
-                            op = wnext;
-                            /* This (rare) case can create a situation where
-                               the first chunkcopy below must be checked.
-                             */
-                        }
-                    }
-                    if (op < len) {             /* still need some from output */
-                        out = chunkcopy_safe(out, from, op, limit);
-                        len -= op;
-                        /* When dist is small the amount of data that can be
-                           copied from the window is also small, and progress
-                           towards the dangerous end of the output buffer is
-                           also small.  This means that for trivial memsets and
-                           for chunkunroll_relaxed() a safety check is
-                           unnecessary.  However, these conditions may not be
-                           entered at all, and in that case it's possible that
-                           the main copy is near the end.
-                          */
-                        out = chunkunroll_relaxed(out, &dist, &len);
-                        out = chunkcopy_safe(out, out - dist, len, limit);
-                    } else {
-                        /* from points to window, so there is no risk of
-                           overlapping pointers requiring memset-like behaviour
-                         */
-                        out = chunkcopy_safe(out, from, len, limit);
-                    }
-#else
                     if (wnext == 0) {           /* very common case */
                         from += wsize - op;
                         if (op < len) {         /* some from window */
@@ -293,18 +250,8 @@ unsigned start;         /* inflate()'s s
                         if (len > 1)
                             *out++ = *from++;
                     }
-#endif
                 }
                 else { 
-#if defined(INFLATE_CHUNK_SIMD_NEON)
-                    /* Whole reference is in range of current output.  No
-                       range checks are necessary because we start with room
-                       for at least 258 bytes of output, so unroll and roundoff
-                       operations can write beyond `out+len` so long as they
-                       stay within 258 bytes of `out`.
-                     */
-                    out = chunkcopy_lapped_relaxed(out, dist, len);
-#else
                     from = out - dist;          /* copy direct from output */
 #ifdef ENABLE_MMI
                     while (len > 7 && dist >= 8) {
@@ -380,7 +327,6 @@ unsigned start;         /* inflate()'s s
                             *out++ = *from++;
                     }                   
 #endif
-#endif
                 }
             }
             else if ((op & 64) == 0) {          /* 2nd level distance code */
--- zlib-1.2.11.dfsg.orig/inffast.h
+++ zlib-1.2.11.dfsg/inffast.h
@@ -9,364 +9,3 @@
  */
 
 void ZLIB_INTERNAL inflate_fast OF((z_streamp strm, unsigned start));
-
-
-#if defined(INFLATE_CHUNK_SIMD_NEON)
-
-#include <stdint.h>
-#include "zutil.h"
-#include <arm_neon.h>
-typedef uint8x16_t z_vec128i_t;
-
-#define Z_STATIC_ASSERT(name, assert) typedef char name[(assert) ? 1 : -1]
-
-#if __STDC_VERSION__ >= 199901L
-#define Z_RESTRICT restrict
-#else
-#define Z_RESTRICT
-#endif
-
-#if defined(__clang__) || defined(__GNUC__) || defined(__llvm__)
-#define Z_BUILTIN_MEMCPY __builtin_memcpy
-#else
-#define Z_BUILTIN_MEMCPY zmemcpy
-#endif
-
-/*
- * chunk copy type: the z_vec128i_t type size should be exactly 128-bits
- * and equal to CHUNKCOPY_CHUNK_SIZE.
- */
-#define CHUNKCOPY_CHUNK_SIZE sizeof(z_vec128i_t)
-
-Z_STATIC_ASSERT(vector_128_bits_wide,
-                CHUNKCOPY_CHUNK_SIZE == sizeof(int8_t) * 16);
-
-/*
- * Ask the compiler to perform a wide, unaligned load with a machine
- * instruction appropriate for the z_vec128i_t type.
- */
-static inline z_vec128i_t loadchunk(
-    const unsigned char FAR* s) {
-  z_vec128i_t v;
-  Z_BUILTIN_MEMCPY(&v, s, sizeof(v));
-  return v;
-}
-
-/*
- * Ask the compiler to perform a wide, unaligned store with a machine
- * instruction appropriate for the z_vec128i_t type.
- */
-static inline void storechunk(
-    unsigned char FAR* d,
-    const z_vec128i_t v) {
-  Z_BUILTIN_MEMCPY(d, &v, sizeof(v));
-}
-
-/*
- * Perform a memcpy-like operation, assuming that length is non-zero and that
- * it's OK to overwrite at least CHUNKCOPY_CHUNK_SIZE bytes of output even if
- * the length is shorter than this.
- *
- * It also guarantees that it will properly unroll the data if the distance
- * between `out` and `from` is at least CHUNKCOPY_CHUNK_SIZE, which we rely on
- * in chunkcopy_relaxed().
- *
- * Aside from better memory bus utilisation, this means that short copies
- * (CHUNKCOPY_CHUNK_SIZE bytes or fewer) will fall straight through the loop
- * without iteration, which will hopefully make the branch prediction more
- * reliable.
- */
-static inline unsigned char FAR* chunkcopy_core(
-    unsigned char FAR* out,
-    const unsigned char FAR* from,
-    unsigned len) {
-  const int bump = (--len % CHUNKCOPY_CHUNK_SIZE) + 1;
-  storechunk(out, loadchunk(from));
-  out += bump;
-  from += bump;
-  len /= CHUNKCOPY_CHUNK_SIZE;
-  while (len-- > 0) {
-    storechunk(out, loadchunk(from));
-    out += CHUNKCOPY_CHUNK_SIZE;
-    from += CHUNKCOPY_CHUNK_SIZE;
-  }
-  return out;
-}
-
-/*
- * Like chunkcopy_core(), but avoid writing beyond of legal output.
- *
- * Accepts an additional pointer to the end of safe output.  A generic safe
- * copy would use (out + len), but it's normally the case that the end of the
- * output buffer is beyond the end of the current copy, and this can still be
- * exploited.
- */
-static inline unsigned char FAR* chunkcopy_core_safe(
-    unsigned char FAR* out,
-    const unsigned char FAR* from,
-    unsigned len,
-    unsigned char FAR* limit) {
-  Assert(out + len <= limit, "chunk copy exceeds safety limit");
-  if ((limit - out) < (ptrdiff_t)CHUNKCOPY_CHUNK_SIZE) {
-    const unsigned char FAR* Z_RESTRICT rfrom = from;
-    if (len & 8) {
-      Z_BUILTIN_MEMCPY(out, rfrom, 8);
-      out += 8;
-      rfrom += 8;
-    }
-    if (len & 4) {
-      Z_BUILTIN_MEMCPY(out, rfrom, 4);
-      out += 4;
-      rfrom += 4;
-    }
-    if (len & 2) {
-      Z_BUILTIN_MEMCPY(out, rfrom, 2);
-      out += 2;
-      rfrom += 2;
-    }
-    if (len & 1) {
-      *out++ = *rfrom++;
-    }
-    return out;
-  }
-  return chunkcopy_core(out, from, len);
-}
-
-/*
- * Perform short copies until distance can be rewritten as being at least
- * CHUNKCOPY_CHUNK_SIZE.
- *
- * Assumes it's OK to overwrite at least the first 2*CHUNKCOPY_CHUNK_SIZE
- * bytes of output even if the copy is shorter than this.  This assumption
- * holds within zlib inflate_fast(), which starts every iteration with at
- * least 258 bytes of output space available (258 being the maximum length
- * output from a single token; see inffast.c).
- */
-static inline unsigned char FAR* chunkunroll_relaxed(
-    unsigned char FAR* out,
-    unsigned FAR* dist,
-    unsigned FAR* len) {
-  const unsigned char FAR* from = out - *dist;
-  while (*dist < *len && *dist < CHUNKCOPY_CHUNK_SIZE) {
-    storechunk(out, loadchunk(from));
-    out += *dist;
-    *len -= *dist;
-    *dist += *dist;
-  }
-  return out;
-}
-
-/*
- * v_load64_dup(): load *src as an unaligned 64-bit int and duplicate it in
- * every 64-bit component of the 128-bit result (64-bit int splat).
- */
-static inline z_vec128i_t v_load64_dup(const void* src) {
-  return vcombine_u8(vld1_u8(src), vld1_u8(src));
-}
-
-/*
- * v_load32_dup(): load *src as an unaligned 32-bit int and duplicate it in
- * every 32-bit component of the 128-bit result (32-bit int splat).
- */
-static inline z_vec128i_t v_load32_dup(const void* src) {
-  int32_t i32;
-  Z_BUILTIN_MEMCPY(&i32, src, sizeof(i32));
-  return vreinterpretq_u8_s32(vdupq_n_s32(i32));
-}
-
-/*
- * v_load16_dup(): load *src as an unaligned 16-bit int and duplicate it in
- * every 16-bit component of the 128-bit result (16-bit int splat).
- */
-static inline z_vec128i_t v_load16_dup(const void* src) {
-  int16_t i16;
-  Z_BUILTIN_MEMCPY(&i16, src, sizeof(i16));
-  return vreinterpretq_u8_s16(vdupq_n_s16(i16));
-}
-
-/*
- * v_load8_dup(): load the 8-bit int *src and duplicate it in every 8-bit
- * component of the 128-bit result (8-bit int splat).
- */
-static inline z_vec128i_t v_load8_dup(const void* src) {
-  return vld1q_dup_u8((const uint8_t*)src);
-}
-
-/*
- * v_store_128(): store the 128-bit vec in a memory destination (that might
- * not be 16-byte aligned) void* out.
- */
-static inline void v_store_128(void* out, const z_vec128i_t vec) {
-  vst1q_u8(out, vec);
-}
-
-
-/*
- * Perform an overlapping copy which behaves as a memset() operation, but
- * supporting periods other than one, and assume that length is non-zero and
- * that it's OK to overwrite at least CHUNKCOPY_CHUNK_SIZE*3 bytes of output
- * even if the length is shorter than this.
- */
-static inline unsigned char FAR* chunkset_core(
-    unsigned char FAR* out,
-    unsigned period,
-    unsigned len) {
-  z_vec128i_t v;
-  const int bump = ((len - 1) % sizeof(v)) + 1;
-
-  switch (period) {
-    case 1:
-      v = v_load8_dup(out - 1);
-      v_store_128(out, v);
-      out += bump;
-      len -= bump;
-      while (len > 0) {
-        v_store_128(out, v);
-        out += sizeof(v);
-        len -= sizeof(v);
-      }
-      return out;
-    case 2:
-      v = v_load16_dup(out - 2);
-      v_store_128(out, v);
-      out += bump;
-      len -= bump;
-      if (len > 0) {
-        v = v_load16_dup(out - 2);
-        do {
-          v_store_128(out, v);
-          out += sizeof(v);
-          len -= sizeof(v);
-        } while (len > 0);
-      }
-      return out;
-    case 4:
-      v = v_load32_dup(out - 4);
-      v_store_128(out, v);
-      out += bump;
-      len -= bump;
-      if (len > 0) {
-        v = v_load32_dup(out - 4);
-        do {
-          v_store_128(out, v);
-          out += sizeof(v);
-          len -= sizeof(v);
-        } while (len > 0);
-      }
-      return out;
-    case 8:
-      v = v_load64_dup(out - 8);
-      v_store_128(out, v);
-      out += bump;
-      len -= bump;
-      if (len > 0) {
-        v = v_load64_dup(out - 8);
-        do {
-          v_store_128(out, v);
-          out += sizeof(v);
-          len -= sizeof(v);
-        } while (len > 0);
-      }
-      return out;
-  }
-  out = chunkunroll_relaxed(out, &period, &len);
-  return chunkcopy_core(out, out - period, len);
-}
-
-/*
- * Perform a memcpy-like operation, but assume that length is non-zero and that
- * it's OK to overwrite at least CHUNKCOPY_CHUNK_SIZE bytes of output even if
- * the length is shorter than this.
- *
- * Unlike chunkcopy_core() above, no guarantee is made regarding the behaviour
- * of overlapping buffers, regardless of the distance between the pointers.
- * This is reflected in the `restrict`-qualified pointers, allowing the
- * compiler to re-order loads and stores.
- */
-static inline unsigned char FAR* chunkcopy_relaxed(
-    unsigned char FAR* Z_RESTRICT out,
-    const unsigned char FAR* Z_RESTRICT from,
-    unsigned len) {
-  return chunkcopy_core(out, from, len);
-}
-
-/*
- * Like chunkcopy_relaxed(), but avoid writing beyond of legal output.
- *
- * Unlike chunkcopy_core_safe() above, no guarantee is made regarding the
- * behaviour of overlapping buffers, regardless of the distance between the
- * pointers.  This is reflected in the `restrict`-qualified pointers, allowing
- * the compiler to re-order loads and stores.
- *
- * Accepts an additional pointer to the end of safe output.  A generic safe
- * copy would use (out + len), but it's normally the case that the end of the
- * output buffer is beyond the end of the current copy, and this can still be
- * exploited.
- */
-static inline unsigned char FAR* chunkcopy_safe(
-    unsigned char FAR* out,
-    const unsigned char FAR* Z_RESTRICT from,
-    unsigned len,
-    unsigned char FAR* limit) {
-  Assert(out + len <= limit, "chunk copy exceeds safety limit");
-  return chunkcopy_core_safe(out, from, len, limit);
-}
-
-/*
- * Perform chunky copy within the same buffer, where the source and destination
- * may potentially overlap.
- *
- * Assumes that len > 0 on entry, and that it's safe to write at least
- * CHUNKCOPY_CHUNK_SIZE*3 bytes to the output.
- */
-static inline unsigned char FAR* chunkcopy_lapped_relaxed(
-    unsigned char FAR* out,
-    unsigned dist,
-    unsigned len) {
-  if (dist < len && dist < CHUNKCOPY_CHUNK_SIZE) {
-    return chunkset_core(out, dist, len);
-  }
-  return chunkcopy_core(out, out - dist, len);
-}
-
-/*
- * Behave like chunkcopy_lapped_relaxed(), but avoid writing beyond of legal
- * output.
- *
- * Accepts an additional pointer to the end of safe output.  A generic safe
- * copy would use (out + len), but it's normally the case that the end of the
- * output buffer is beyond the end of the current copy, and this can still be
- * exploited.
- */
-static inline unsigned char FAR* chunkcopy_lapped_safe(
-    unsigned char FAR* out,
-    unsigned dist,
-    unsigned len,
-    unsigned char FAR* limit) {
-  Assert(out + len <= limit, "chunk copy exceeds safety limit");
-  if ((limit - out) < (ptrdiff_t)(3 * CHUNKCOPY_CHUNK_SIZE)) {
-    /* TODO(cavalcantii): try harder to optimise this */
-    while (len-- > 0) {
-      *out = *(out - dist);
-      out++;
-    }
-    return out;
-  }
-  return chunkcopy_lapped_relaxed(out, dist, len);
-}
-
-/*
- * The chunk-copy code above deals with writing the decoded DEFLATE data to
- * the output with SIMD methods to increase decode speed. Reading the input
- * to the DEFLATE decoder with a wide, SIMD method can also increase decode
- * speed. This option is supported on little endian machines, and reads the
- * input data in 64-bit (8 byte) chunks.
- */
-
-
-
-#undef Z_STATIC_ASSERT
-#undef Z_RESTRICT
-#undef Z_BUILTIN_MEMCPY
-
-#endif //defined(INFLATE_CHUNK_SIMD_NEON)
--- zlib-1.2.11.dfsg.orig/inflate.c
+++ zlib-1.2.11.dfsg/inflate.c
@@ -405,16 +405,9 @@ unsigned copy;
 
     /* if it hasn't been done already, allocate space for the window */
     if (state->window == Z_NULL) {
-#if defined(INFLATE_CHUNK_SIMD_NEON)
-        unsigned wsize = 1U << state->wbits;
-        state->window = (unsigned char FAR *)
-                        ZALLOC(strm, CHUNKCOPY_CHUNK_SIZE + wsize,
-                               sizeof(unsigned char));
-#else
         state->window = (unsigned char FAR *)
                         ZALLOC(strm, 1U << state->wbits,
                                sizeof(unsigned char));
-#endif
         if (state->window == Z_NULL) return 1;
     }
 
